
<!-- saved from url=(0077)http://www.teach.cs.toronto.edu/~csc209h/winter/labs/lab2-pointers-scanf.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252"></head><body><h1 id="lab-2-pointers-and-input">Lab 2: Pointers and Input</h1>
<p><strong>Due date</strong>: Friday 19 January before 6:30pm. Submissions made after the deadline will not be accepted.</p>
<h2 id="introduction">Introduction</h2>
<p>The purpose of this lab is to practice writing C programs involving pointers and the <code>scanf</code> function.</p>
<p>To start, login to MarkUs and navigate to the <code>lab2</code> assignment. Like the previous lab, this triggers the starter code for this lab to be committed to your repository. We've described each problem briefly below, but for more detail on the first two problems, read through the starter code. There is no starter code for the final two problems.</p>
<h2 id="invest.c">1. invest.c</h2>
<p>Your task is to implement a function <code>invest</code> that takes an amount of money and multiplies it by a given rate. It's your job to figure out the exact type of this function's arguments, given the sample usage in the <code>main</code> function in the starter code.</p>
<h2 id="score_card.c">2. score_card.c</h2>
<p>Your task is to implement a function <code>sum_card</code>, which takes an array of pointers to integers, and returns the sum of the integers being pointed to.</p>
<h2 id="phone.c">3. phone.c</h2>
<p>Your task is to write a small C program called <code>phone.c</code> that uses <code>scanf</code> to read two values from standard input. The first is a 10 character string and the second is an integer. The program takes no command-line arguments.</p>
<p>If the integer is zero, the program prints the full string to standard output followed by a single newline <code>\n</code> character. If the integer is between 1 and 9 inclusive the program prints only the corresponding digit from the string to stdout (again followed by a newline). In both of these cases the program returns 0.</p>
<p>If the integer is less than 0 or greater than 9, the program prints the message "ERROR" (followed by a newline) to stdout and returns 1.</p>
We haven't learned about strings yet, but you will see that to hold a string of 10 characters, you actually need to allocate space for 11 characters. The extra space is for a special character that indicates the end of the string. Use this line
<pre>char phone[11];
</pre>
<p>to declare the variable to hold the string. Other than this line, there is no starter code for this program.</p>
<p>You may assume that the user correctly enters a 10-character string and an integer. You must not print anything else to stdout. <em>Do not prompt the user to enter the values.</em></p>
<p>Hint: If you skipped the video titled, <a href="https://pcrs.teach.cs.toronto.edu/209/content/challenges/101/1#video-10">Input, Output and Compiling Video 3: Reading Input (scanf)</a>, now would be a good time to go watch it.</p>
<h2 id="phone_loop.c">4. phone_loop.c</h2>
<p>Your task is to write a C program called <code>phone_loop.c</code>. This program will again read from standard input using <code>scanf</code> and take no command-line arguments. Similar to <code>phone.c</code>, this program reads a 10-character string as the first input value, but then it repeatedly reads integers until standard input is closed. Hint: Use a while loop with condition <code>while (scanf(...) != EOF)</code> rather than ignoring the return value from <code>scanf</code>.</p>
<p>After each integer the output produced is as before:</p>
<ul>
<li>if the integer is 0, the full string is printed</li>
<li>if the integer is between 1 and 9, the individual character at that position is printed</li>
<li>if the integer is less than 0 or greater than 9, the message "ERROR" is printed</li>
</ul>
<p>In each case the printing is followed by a newline character.</p>
<p>When the program finishes running, <code>main</code> returns with a return code of 0 if there were no errors and with a return code of 1 otherwise.</p>
<p>Do <em>not</em> print any extra newline characters or any prompts for the user.</p>
<h3 id="how-do-you-end-standard-input">How do you end standard input?</h3>
<p>One way to run your program is to redirect the input to come from a file. Using that approach, it is clear when the file ends. But how do you close standard input when it is coming from the keyboard? You manually indicate the end of standard input from a keyboard by pressing Ctrl-D (on Unix) or Ctrl-Z (on Windows) and enter.</p>
<h2 id="submission">Submission</h2>
<p>Use git to submit your final <code>invest.c</code>, <code>score_card.c</code>, <code>phone.c</code> and <code>phone_loop.c</code> -- make sure they're inside your <code>lab2</code> folder and named exactly as described in this handout, as that's where our test scripts will be looking for them. Do <em>NOT</em> add or commit executables to your repository. We will build executables by compiling your code as part of testingit.</p>
<p><strong>IMPORTANT</strong>: make sure to review how to use git to submit your work to the MarkUs server; in particular, you need to run <code>git push</code>, not just <code>git commit</code> and <code>git add</code>.</p>
</body></html>